#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import time
import logging
import requests
import schedule
from datetime import datetime
from threading import Thread

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ç–∞ –∑–∞–¥–∞—á
CONFIG_FILE = 'config.json'
TASKS_FILE = 'tasks.json'

# URL —à–∞–±–ª–æ–Ω–∏ –¥–ª—è API Telegram
API_URL = 'https://api.telegram.org/bot{token}/{method}'

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
STATE_NONE = 0
STATE_WAITING_TOKEN = 1

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_states = {}

class TelegramBotAPI:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram Bot API —á–µ—Ä–µ–∑ –ø—Ä—è–º—ñ HTTP –∑–∞–ø–∏—Ç–∏"""
    
    def __init__(self, fallback_token=None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º —Ä–µ–∑–µ—Ä–≤–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º
        
        :param fallback_token: –†–µ–∑–µ—Ä–≤–Ω–∏–π —Ç–æ–∫–µ–Ω, —è–∫—â–æ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
        """
        self.config = self.load_config()
        self.token = self.config.get('token') or fallback_token
        self.chat_id = self.config.get('chat_id')
        self.webhook_url = self.config.get('webhook_url')
        self.user_states = {}
        self.last_update_id = 0
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞
        if not self.token:
            logger.warning("–¢–æ–∫–µ–Ω –Ω–µ –≤–∫–∞–∑–∞–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    
    def load_config(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É"""
        try:
            if os.path.exists(CONFIG_FILE):
                with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            return {}
    
    def save_config(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —É —Ñ–∞–π–ª"""
        try:
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    
    def load_tasks(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á –∑ —Ñ–∞–π–ª—É"""
        try:
            if os.path.exists(TASKS_FILE):
                with open(TASKS_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {"tasks": []}
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á: {e}")
            return {"tasks": []}
    
    def save_tasks(self, tasks_data):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á —É —Ñ–∞–π–ª"""
        try:
            with open(TASKS_FILE, 'w', encoding='utf-8') as f:
                json.dump(tasks_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á: {e}")
    
    def api_request(self, method, data=None, files=None):
        """
        –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ Telegram API
        
        :param method: –ú–µ—Ç–æ–¥ API
        :param data: –î–∞–Ω—ñ –¥–ª—è –∑–∞–ø–∏—Ç—É
        :param files: –§–∞–π–ª–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        :return: –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–±–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        """
        if not self.token:
            logger.error("–ó–∞–ø–∏—Ç –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return None
        
        url = API_URL.format(token=self.token, method=method)
        
        try:
            if files:
                response = requests.post(url, data=data, files=files, timeout=30)
            else:
                response = requests.post(url, json=data, timeout=30)
            
            response.raise_for_status()
            result = response.json()
            
            if not result.get('ok'):
                logger.error(f"API –ø–æ–º–∏–ª–∫–∞: {result.get('description')}")
                return None
            
            return result.get('result')
        except requests.RequestException as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
            return None
    
    def get_updates(self, offset=0, timeout=30):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ Telegram API
        
        :param offset: ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è + 1
        :param timeout: –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        :return: –°–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω—å
        """
        data = {
            'offset': offset,
            'timeout': timeout,
            'allowed_updates': ['message', 'callback_query']
        }
        return self.api_request('getUpdates', data)
    
    def set_webhook(self, url):
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å
        
        :param url: URL –≤–µ–±—Ö—É–∫–∞
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
        """
        data = {'url': url}
        result = self.api_request('setWebhook', data)
        if result:
            self.webhook_url = url
            self.config['webhook_url'] = url
            self.save_config()
        return result
    
    def delete_webhook(self):
        """
        –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
        
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
        """
        result = self.api_request('deleteWebhook')
        if result:
            self.webhook_url = None
            self.config.pop('webhook_url', None)
            self.save_config()
        return result
    
    def get_webhook_info(self):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–µ–±—Ö—É–∫
        
        :return: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–µ–±—Ö—É–∫
        """
        return self.api_request('getWebhookInfo')
    
    def send_message(self, chat_id, text, parse_mode=None, reply_markup=None):
        """
        –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        
        :param chat_id: ID —á–∞—Ç—É
        :param text: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        :param parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è (HTML, Markdown)
        :param reply_markup: –†–æ–∑–º—ñ—Ç–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        :return: –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        """
        data = {
            'chat_id': chat_id,
            'text': text
        }
        
        if parse_mode:
            data['parse_mode'] = parse_mode
        
        if reply_markup:
            data['reply_markup'] = reply_markup
        
        return self.api_request('sendMessage', data)
    
    def get_daily_report(self):
        """
        –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –∑ –∑–∞–¥–∞—á
        
        :return: –¢–µ–∫—Å—Ç –∑–≤—ñ—Ç—É
        """
        tasks_data = self.load_tasks()
        tasks = tasks_data.get('tasks', [])
        
        today = datetime.now().strftime('%d.%m.%Y')
        report = f"üìÖ –ó–≤—ñ—Ç –∑–∞ –¥–µ–Ω—å ({today}):\n\n"
        
        if not tasks:
            return report + "–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑–∞–¥–∞—á –Ω–µ –±—É–ª–æ"
        
        completed_tasks = [task['name'] for task in tasks if task.get('completed')]
        pending_tasks = [task['name'] for task in tasks if not task.get('completed')]
        
        if completed_tasks:
            report += "‚úÖ –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ:\n"
            for task in completed_tasks:
                report += f"- {task}\n"
        
        if pending_tasks:
            if completed_tasks:
                report += "\n"
            report += "‚ùå –ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ:\n"
            for task in pending_tasks:
                report += f"- {task}\n"
        
        return report
    
    def send_report(self):
        """
        –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –≤ —á–∞—Ç
        
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        """
        if not self.chat_id:
            logger.warning("–ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç: chat_id –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
            return None
        
        report = self.get_daily_report()
        return self.send_message(self.chat_id, report)
    
    def handle_message(self, message):
        """
        –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        
        :param message: –û–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        """
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        chat_id = message.get('chat', {}).get('id')
        user_id = message.get('from', {}).get('id')
        text = message.get('text', '')
        
        # –Ø–∫—â–æ chat_id —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
        if not self.chat_id and chat_id:
            self.chat_id = chat_id
            self.config['chat_id'] = chat_id
            self.save_config()
            logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ chat_id: {chat_id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_state = self.user_states.get(user_id, STATE_NONE)
        
        # –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
        if user_state == STATE_WAITING_TOKEN:
            self.token = text.strip()
            self.config['token'] = self.token
            self.save_config()
            self.send_message(chat_id, "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            self.user_states[user_id] = STATE_NONE
            return
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
        if text.startswith('/'):
            command = text.split()[0].lower()
            
            if command == '/start':
                self.send_message(
                    chat_id,
                    "üëã –í—ñ—Ç–∞—é! –Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –±–æ—Ç –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á–∞–º–∏.\n\n"
                    "üîπ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                    "/start - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
                    "/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞\n"
                    "/report - –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n\n"
                    "‚öôÔ∏è –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /settings"
                )
            
            elif command == '/settings':
                self.send_message(chat_id, "üîë –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:")
                self.user_states[user_id] = STATE_WAITING_TOKEN
            
            elif command == '/report':
                if not self.token:
                    self.send_message(chat_id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /settings")
                    return
                
                report = self.get_daily_report()
                self.send_message(chat_id, report)
    
    def process_updates(self):
        """
        –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ Telegram API
        
        :return: True, —è–∫—â–æ –æ–±—Ä–æ–±–∫–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ
        """
        updates = self.get_updates(offset=self.last_update_id + 1)
        if not updates:
            return False
        
        for update in updates:
            update_id = update.get('update_id')
            if update_id > self.last_update_id:
                self.last_update_id = update_id
            
            if 'message' in update:
                self.handle_message(update['message'])
        
        return True
    
    def polling(self, interval=1):
        """
        –¶–∏–∫–ª—ñ—á–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è API –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω—å
        
        :param interval: –Ü–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        logger.info("–ü–æ—á–∞—Ç–æ–∫ —Ü–∏–∫–ª—ñ—á–Ω–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è")
        while True:
            try:
                self.process_updates()
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è: {e}")
            
            time.sleep(interval)
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤"""
        # –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –∑–≤—ñ—Ç —â–æ–¥–Ω—è –æ 20:00
        schedule.every().day.at("20:00").do(self.send_report)
        
        logger.info("–ó–∞–ø—É—â–µ–Ω–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫")
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ (–¥–æ–ø–æ–º—ñ–∂–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
def add_task(name, completed=False):
    """
    –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ
    
    :param name: –ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ
    :param completed: –°—Ç–∞—Ç—É—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    """
    try:
        if os.path.exists(TASKS_FILE):
            with open(TASKS_FILE, 'r', encoding='utf-8') as f:
                tasks_data = json.load(f)
        else:
            tasks_data = {"tasks": []}
        
        tasks_data['tasks'].append({
            'name': name,
            'completed': completed
        })
        
        with open(TASKS_FILE, 'w', encoding='utf-8') as f:
            json.dump(tasks_data, f, ensure_ascii=False, indent=2)
        
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
    bot = TelegramBotAPI()
    
    # –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
    if not bot.token:
        logger.warning("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ë–æ—Ç –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π —Ç–æ–∫–µ–Ω, "
                     "—è–∫—â–æ –π–æ–≥–æ –Ω–∞–¥–∞–Ω–æ, –∞–±–æ —á–µ–∫–∞—Ç–∏ –Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∑–∞–¥–∞—á, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î
    if not os.path.exists(TASKS_FILE):
        logger.info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∑–∞–¥–∞—á")
        add_task("–ó–∞–¥–∞—á–∞ 1", completed=True)
        add_task("–ó–∞–¥–∞—á–∞ 2", completed=True)
        add_task("–ó–∞–¥–∞—á–∞ 3", completed=False)
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    scheduler_thread = Thread(target=bot.run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    
    try:
        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª—ñ—á–Ω–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
        bot.polling()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    main() 