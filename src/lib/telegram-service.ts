/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Telegram API
 */

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Telegram
export interface TelegramSettings {
  botToken: string;
  chatId: string;
  enabled: boolean;
  reportSchedule: {
    daily: boolean;
    weekly: boolean;
    dailyTime: string; // —Ñ–æ—Ä–º–∞—Ç "HH:MM"
    weeklyDay: number; // 0-6 (–Ω–µ–¥—ñ–ª—è-—Å—É–±–æ—Ç–∞)
    weeklyTime: string; // —Ñ–æ—Ä–º–∞—Ç "HH:MM"
  };
}

// –ö–ª—é—á –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤ localStorage
export const TELEGRAM_SETTINGS_KEY = "telegram_settings";

// –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
export const DEFAULT_TELEGRAM_SETTINGS: TelegramSettings = {
  botToken: "",
  chatId: "",
  enabled: false,
  reportSchedule: {
    daily: false,
    weekly: false,
    dailyTime: "20:00",
    weeklyDay: 5, // –ü'—è—Ç–Ω–∏—Ü—è
    weeklyTime: "18:00",
  },
};

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –∑ localStorage
 */
export const loadTelegramSettings = (): TelegramSettings => {
  try {
    const savedSettings = localStorage.getItem(TELEGRAM_SETTINGS_KEY);
    if (savedSettings) {
      return JSON.parse(savedSettings);
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Telegram:", error);
  }
  return DEFAULT_TELEGRAM_SETTINGS;
};

/**
 * –ó–±–µ—Ä—ñ–≥–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –≤ localStorage
 */
export const saveTelegramSettings = (settings: TelegramSettings): void => {
  try {
    localStorage.setItem(TELEGRAM_SETTINGS_KEY, JSON.stringify(settings));
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Telegram:", error);
  }
};

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç
 */
export const sendTelegramMessage = async (
  botToken: string,
  chatId: string,
  message: string
): Promise<boolean> => {
  try {
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: "HTML",
        }),
      }
    );

    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram:", error);
    return false;
  }
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
 */
export const validateBotToken = async (botToken: string): Promise<boolean> => {
  try {
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/getMe`
    );
    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞:", error);
    return false;
  }
};

/**
 * –§–æ—Ä–º–∞—Ç—É—î –∑–≤—ñ—Ç –ø—Ä–æ –∑–∞–¥–∞—á—ñ –∑–∞ –¥–µ–Ω—å
 */
export const formatDailyReport = (tasks: any[], date: Date): string => {
  const formattedDate = date.toLocaleDateString('uk-UA', { 
    day: 'numeric', 
    month: 'long', 
    year: 'numeric' 
  });
  
  let report = `<b>üìÖ –ó–≤—ñ—Ç –∑–∞ ${formattedDate}</b>\n\n`;
  
  if (tasks.length === 0) {
    report += "–ù–µ–º–∞—î –∑–∞–¥–∞—á –Ω–∞ —Ü–µ–π –¥–µ–Ω—å.";
    return report;
  }
  
  const completedTasks = tasks.filter(task => task.completed);
  const pendingTasks = tasks.filter(task => !task.completed);
  
  report += `<b>‚úÖ –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ (${completedTasks.length}/${tasks.length}):</b>\n`;
  if (completedTasks.length > 0) {
    completedTasks.forEach((task, index) => {
      report += `${index + 1}. ${task.title}\n`;
    });
  } else {
    report += "–ù–µ–º–∞—î –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–¥–∞—á.\n";
  }
  
  report += `\n<b>‚è≥ –ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ (${pendingTasks.length}):</b>\n`;
  if (pendingTasks.length > 0) {
    pendingTasks.forEach((task, index) => {
      report += `${index + 1}. ${task.title}\n`;
    });
  } else {
    report += "–ù–µ–º–∞—î –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–¥–∞—á.";
  }
  
  return report;
};

/**
 * –§–æ—Ä–º–∞—Ç—É—î –∑–≤—ñ—Ç –ø—Ä–æ –∑–∞–¥–∞—á—ñ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
 */
export const formatWeeklyReport = (tasks: any[], startDate: Date, endDate: Date): string => {
  const startFormatted = startDate.toLocaleDateString('uk-UA', { 
    day: 'numeric', 
    month: 'long'
  });
  
  const endFormatted = endDate.toLocaleDateString('uk-UA', { 
    day: 'numeric', 
    month: 'long', 
    year: 'numeric' 
  });
  
  let report = `<b>üìä –¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç (${startFormatted} - ${endFormatted})</b>\n\n`;
  
  if (tasks.length === 0) {
    report += "–ù–µ–º–∞—î –∑–∞–¥–∞—á –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥.";
    return report;
  }
  
  const completedTasks = tasks.filter(task => task.completed);
  const pendingTasks = tasks.filter(task => !task.completed);
  
  const completionRate = Math.round((completedTasks.length / tasks.length) * 100);
  
  report += `<b>üìà –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å: ${completionRate}%</b>\n`;
  report += `<b>‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: ${completedTasks.length} –∑–∞–¥–∞—á</b>\n`;
  report += `<b>‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${pendingTasks.length} –∑–∞–¥–∞—á</b>\n\n`;
  
  // –ì—Ä—É–ø—É—î–º–æ –∑–∞–¥–∞—á—ñ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
  const tasksByCategory: Record<string, any[]> = {};
  tasks.forEach(task => {
    const category = task.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó';
    if (!tasksByCategory[category]) {
      tasksByCategory[category] = [];
    }
    tasksByCategory[category].push(task);
  });
  
  report += "<b>üìã –ó–∞–¥–∞—á—ñ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏:</b>\n";
  
  Object.entries(tasksByCategory).forEach(([category, categoryTasks]) => {
    const categoryCompleted = categoryTasks.filter(task => task.completed).length;
    report += `\n<b>${category} (${categoryCompleted}/${categoryTasks.length}):</b>\n`;
    
    categoryTasks.forEach((task, index) => {
      const status = task.completed ? "‚úÖ" : "‚è≥";
      report += `${status} ${task.title}\n`;
    });
  });
  
  return report;
};

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ç–µ—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç
 */
export const sendTestReport = async (): Promise<boolean> => {
  const settings = loadTelegramSettings();
  
  if (!settings.enabled || !settings.botToken || !settings.chatId) {
    return false;
  }
  
  const today = new Date();
  const formattedDate = today.toLocaleDateString('uk-UA', { 
    day: 'numeric', 
    month: 'long', 
    year: 'numeric' 
  });
  
  const message = `<b>üß™ –¢–µ—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç</b>\n\n` +
    `–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Telegram –±–æ—Ç–∞.\n\n` +
    `<b>üìÖ –î–∞—Ç–∞:</b> ${formattedDate}\n` +
    `<b>‚è∞ –ß–∞—Å:</b> ${today.toLocaleTimeString('uk-UA')}\n\n` +
    `–Ø–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑–Ω–∞—á–∏—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ.`;
  
  return await sendTelegramMessage(settings.botToken, settings.chatId, message);
}; 