/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–≤—ñ—Ç—ñ–≤
 */

import { 
  TelegramSettings, 
  loadTelegramSettings, 
  sendTelegramMessage, 
  formatDailyReport, 
  formatWeeklyReport 
} from './telegram-service';

// –ö–ª—é—á –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–∞–¥–∞—á –≤ localStorage
const TASKS_STORAGE_KEY = 'tasks';

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–¥–∞—á—ñ
interface Task {
  id: string;
  title: string;
  description?: string;
  dueDate: string;
  completed: boolean;
  category?: string;
  priority?: 'low' | 'medium' | 'high';
  createdAt: string;
  updatedAt?: string;
}

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–∞–¥–∞—á—ñ –∑ localStorage
 */
const loadTasks = (): Task[] => {
  try {
    const tasksJson = localStorage.getItem(TASKS_STORAGE_KEY);
    return tasksJson ? JSON.parse(tasksJson) : [];
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á:', error);
    return [];
  }
};

/**
 * –§—ñ–ª—å—Ç—Ä—É—î –∑–∞–¥–∞—á—ñ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç
 */
const filterTasksByDateRange = (tasks: Task[], startDate: Date, endDate: Date): Task[] => {
  return tasks.filter(task => {
    const taskDate = new Date(task.dueDate);
    return taskDate >= startDate && taskDate <= endDate;
  });
};

/**
 * –û—Ç—Ä–∏–º—É—î –∑–∞–¥–∞—á—ñ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –¥–µ–Ω—å
 */
const getTasksForDay = (date: Date): Task[] => {
  const tasks = loadTasks();
  const startOfDay = new Date(date);
  startOfDay.setHours(0, 0, 0, 0);
  
  const endOfDay = new Date(date);
  endOfDay.setHours(23, 59, 59, 999);
  
  return filterTasksByDateRange(tasks, startOfDay, endOfDay);
};

/**
 * –û—Ç—Ä–∏–º—É—î –∑–∞–¥–∞—á—ñ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å
 */
const getTasksForWeek = (date: Date): { tasks: Task[], startDate: Date, endDate: Date } => {
  const tasks = loadTasks();
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω—è (–ø–æ–Ω–µ–¥—ñ–ª–æ–∫)
  const startDate = new Date(date);
  const day = startDate.getDay();
  const diff = startDate.getDate() - day + (day === 0 ? -6 : 1); // –Ø–∫—â–æ –Ω–µ–¥—ñ–ª—è, —Ç–æ -6, —ñ–Ω–∞–∫—à–µ +1
  startDate.setDate(diff);
  startDate.setHours(0, 0, 0, 0);
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫—ñ–Ω–µ—Ü—å —Ç–∏–∂–Ω—è (–Ω–µ–¥—ñ–ª—è)
  const endDate = new Date(startDate);
  endDate.setDate(endDate.getDate() + 6);
  endDate.setHours(23, 59, 59, 999);
  
  const weekTasks = filterTasksByDateRange(tasks, startDate, endDate);
  
  return { tasks: weekTasks, startDate, endDate };
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç
 */
const shouldSendDailyReport = (settings: TelegramSettings): boolean => {
  if (!settings.enabled || !settings.reportSchedule.daily) {
    return false;
  }
  
  const now = new Date();
  const [hours, minutes] = settings.reportSchedule.dailyTime.split(':').map(Number);
  
  return now.getHours() === hours && now.getMinutes() === minutes;
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç
 */
const shouldSendWeeklyReport = (settings: TelegramSettings): boolean => {
  if (!settings.enabled || !settings.reportSchedule.weekly) {
    return false;
  }
  
  const now = new Date();
  const [hours, minutes] = settings.reportSchedule.weeklyTime.split(':').map(Number);
  
  return now.getDay() === settings.reportSchedule.weeklyDay && 
         now.getHours() === hours && 
         now.getMinutes() === minutes;
};

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç
 */
const sendDailyReport = async (): Promise<boolean> => {
  const settings = loadTelegramSettings();
  
  if (!settings.enabled || !settings.reportSchedule.daily) {
    return false;
  }
  
  const today = new Date();
  const tasks = getTasksForDay(today);
  const report = formatDailyReport(tasks, today);
  
  return await sendTelegramMessage(settings.botToken, settings.chatId, report);
};

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —â–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç
 */
const sendWeeklyReport = async (): Promise<boolean> => {
  const settings = loadTelegramSettings();
  
  if (!settings.enabled || !settings.reportSchedule.weekly) {
    return false;
  }
  
  const today = new Date();
  const { tasks, startDate, endDate } = getTasksForWeek(today);
  const report = formatWeeklyReport(tasks, startDate, endDate);
  
  return await sendTelegramMessage(settings.botToken, settings.chatId, report);
};

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–≤—ñ—Ç—ñ–≤
 */
export const initReportScheduler = (): void => {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–≤—ñ—Ç
  setInterval(() => {
    const settings = loadTelegramSettings();
    
    if (shouldSendDailyReport(settings)) {
      sendDailyReport()
        .then(success => {
          if (success) {
            console.log('–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
          } else {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É');
          }
        });
    }
    
    if (shouldSendWeeklyReport(settings)) {
      sendWeeklyReport()
        .then(success => {
          if (success) {
            console.log('–©–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
          } else {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∑–≤—ñ—Ç—É');
          }
        });
    }
  }, 60000); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
};

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ç–µ—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç
 */
export const sendTestReport = async (): Promise<boolean> => {
  const settings = loadTelegramSettings();
  
  if (!settings.enabled) {
    return false;
  }
  
  const today = new Date();
  const tasks = getTasksForDay(today);
  const report = `<b>üß™ –¢–µ—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç</b>\n\n` + formatDailyReport(tasks, today);
  
  return await sendTelegramMessage(settings.botToken, settings.chatId, report);
}; 