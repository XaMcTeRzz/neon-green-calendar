import axios from 'axios';
import * as fs from 'fs';
import * as path from 'path';
import * as schedule from 'node-schedule';

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –¥–ª—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ç–∞ –∑–∞–¥–∞—á
interface TelegramConfig {
  token: string;
  chatId: string | number;
  scheduleTime: string; // –§–æ—Ä–º–∞—Ç "HH:MM"
}

interface Task {
  id: number;
  name: string;
  completed: boolean;
  due_date?: string;
  priority?: 'high' | 'medium' | 'low';
  category?: string;
}

interface Config {
  telegram: TelegramConfig;
  tasks: {
    tasksFile: string;
  };
}

export class TelegramReporter {
  private config: Config;
  private configPath: string;
  private scheduledJob: schedule.Job | null = null;

  constructor(configPath = 'config.json') {
    this.configPath = configPath;
    this.config = this.loadConfig();
    this.initScheduler();
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É
   */
  private loadConfig(): Config {
    try {
      if (fs.existsSync(this.configPath)) {
        const configData = fs.readFileSync(this.configPath, 'utf8');
        return JSON.parse(configData);
      }
      // –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
      const defaultConfig: Config = {
        telegram: {
          token: '',
          chatId: '',
          scheduleTime: '18:00'
        },
        tasks: {
          tasksFile: 'tasks.json'
        }
      };
      this.saveConfig(defaultConfig);
      return defaultConfig;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:', error);
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é');
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —É —Ñ–∞–π–ª
   */
  private saveConfig(config: Config): void {
    try {
      fs.writeFileSync(this.configPath, JSON.stringify(config, null, 2), 'utf8');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:', error);
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é');
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Telegram
   */
  public updateTelegramSettings(token: string, chatId: string | number, scheduleTime?: string): void {
    this.config.telegram.token = token;
    this.config.telegram.chatId = chatId;
    
    if (scheduleTime) {
      this.config.telegram.scheduleTime = scheduleTime;
    }
    
    this.saveConfig(this.config);
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑ –Ω–æ–≤–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    this.initScheduler();
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á –∑ —Ñ–∞–π–ª—É
   */
  private loadTasks(): Task[] {
    try {
      const tasksPath = this.config.tasks.tasksFile;
      if (fs.existsSync(tasksPath)) {
        const tasksData = fs.readFileSync(tasksPath, 'utf8');
        const parsedData = JSON.parse(tasksData);
        return parsedData.tasks || [];
      }
      return [];
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–∞–¥–∞—á:', error);
      return [];
    }
  }

  /**
   * –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–¥–∞—á
   */
  public generateReport(tasks: Task[] = this.loadTasks()): string {
    const completedTasks = tasks.filter(task => task.completed);
    const pendingTasks = tasks.filter(task => !task.completed);
    
    const today = new Date().toLocaleDateString('uk-UA');
    let report = `üìÖ –ó–≤—ñ—Ç –∑–∞ –¥–µ–Ω—å (${today}):\n\n`;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    report += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${completedTasks.length}/${tasks.length} –≤–∏–∫–æ–Ω–∞–Ω–æ`;
    if (tasks.length > 0) {
      const completionRate = Math.round((completedTasks.length / tasks.length) * 100);
      report += ` (${completionRate}%)\n\n`;
    } else {
      report += ' (0%)\n\n';
    }
    
    // –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ
    if (completedTasks.length > 0) {
      report += '‚úÖ –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ:\n';
      completedTasks.forEach(task => {
        report += `- ${task.name}\n`;
      });
      report += '\n';
    }
    
    // –ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ
    if (pendingTasks.length > 0) {
      report += '‚ùå –ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ:\n';
      pendingTasks.forEach(task => {
        const dueDate = task.due_date ? ` (–¥–æ ${new Date(task.due_date).toLocaleDateString('uk-UA')})` : '';
        const priority = task.priority ? this.getPriorityEmoji(task.priority) : '';
        report += `- ${task.name}${dueDate} ${priority}\n`;
      });
    }
    
    return report;
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è emoji –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
   */
  private getPriorityEmoji(priority: string): string {
    switch (priority) {
      case 'high':
        return 'üî¥';
      case 'medium':
        return 'üü°';
      case 'low':
        return 'üü¢';
      default:
        return '';
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram API
   */
  public async sendMessage(message: string): Promise<boolean> {
    const { token, chatId } = this.config.telegram;
    
    if (!token || !chatId) {
      console.error('–ü–æ–º–∏–ª–∫–∞: –¢–æ–∫–µ–Ω –∞–±–æ Chat ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ');
      return false;
    }
    
    try {
      const url = `https://api.telegram.org/bot${token}/sendMessage`;
      const response = await axios.post(url, {
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      });
      
      if (response.data && response.data.ok) {
        console.log('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
        return true;
      } else {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', response.data);
        return false;
      }
    } catch (error) {
      if (axios.isAxiosError(error)) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram:', 
          error.response?.data?.description || error.message);
          
        // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø–æ–º–∏–ª–∫—É –ø–æ API
        if (error.response?.data?.error_code === 401) {
          console.error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω. –û–Ω–æ–≤—ñ—Ç—å —Ç–æ–∫–µ–Ω —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö.');
        } else if (error.response?.data?.error_code === 400) {
          console.error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Ç—É –∞–±–æ chat_id. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.');
        }
      } else {
        console.error('–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
      }
      return false;
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–≤—ñ—Ç—É
   */
  public async sendReport(): Promise<boolean> {
    const tasks = this.loadTasks();
    const report = this.generateReport(tasks);
    return await this.sendMessage(report);
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–≤—ñ—Ç—ñ–≤
   */
  public initScheduler(): void {
    // –°–ø–æ—á–∞—Ç–∫—É —Å–∫–∞—Å–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫, —è–∫—â–æ –≤—ñ–Ω —î
    if (this.scheduledJob) {
      this.scheduledJob.cancel();
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
    if (!this.config.telegram.token || !this.config.telegram.chatId) {
      console.warn('–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω –∞–±–æ chat_id');
      return;
    }
    
    // –†–æ–∑–±—ñ—Ä —á–∞—Å—É —Ä–æ–∑–∫–ª–∞–¥—É
    const [hours, minutes] = this.config.telegram.scheduleTime.split(':').map(Number);
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
    this.scheduledJob = schedule.scheduleJob(`${minutes} ${hours} * * *`, async () => {
      console.log(`–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º (${this.config.telegram.scheduleTime})`);
      await this.sendReport();
    });
    
    console.log(`–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ. –ó–≤—ñ—Ç–∏ –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è —â–æ–¥–Ω—è –æ ${this.config.telegram.scheduleTime}`);
  }

  /**
   * –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
   */
  public async sendTestReport(): Promise<boolean> {
    const { token, chatId } = this.config.telegram;
    
    if (!token || !chatId) {
      console.error('–ü–æ–º–∏–ª–∫–∞: –¢–æ–∫–µ–Ω –∞–±–æ Chat ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ');
      return false;
    }
    
    const testMessage = 'üîç –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n–Ø–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑–Ω–∞—á–∏—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!';
    
    try {
      const result = await this.sendMessage(testMessage);
      return result;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
      return false;
    }
  }
}

// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
export const initTelegramReporter = (): TelegramReporter => {
  return new TelegramReporter();
}; 