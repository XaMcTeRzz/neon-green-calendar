#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import time
import logging
import requests
import schedule
from datetime import datetime
from threading import Thread
from src.task_manager import TaskManager
from src.google_calendar_integration import GoogleCalendarIntegration

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ç–∞ –∑–∞–¥–∞—á
CONFIG_FILE = 'config.json'
TASKS_FILE = 'tasks.json'

# URL —à–∞–±–ª–æ–Ω–∏ –¥–ª—è API Telegram
API_URL = 'https://api.telegram.org/bot{token}/{method}'

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
STATE_NONE = 0
STATE_WAITING_TOKEN = 1
STATE_WAITING_TASK_NAME = 2
STATE_WAITING_TASK_DUE_DATE = 3
STATE_WAITING_TASK_PRIORITY = 4
STATE_WAITING_TASK_CATEGORY = 5

class TelegramBotExtended:
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∫–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram Bot API —á–µ—Ä–µ–∑ –ø—Ä—è–º—ñ HTTP –∑–∞–ø–∏—Ç–∏"""
    
    def __init__(self, fallback_token=None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º —Ä–µ–∑–µ—Ä–≤–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º
        
        :param fallback_token: –†–µ–∑–µ—Ä–≤–Ω–∏–π —Ç–æ–∫–µ–Ω, —è–∫—â–æ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
        """
        self.config = self.load_config()
        self.token = self.config.get('token') or fallback_token
        self.chat_id = self.config.get('chat_id')
        self.user_states = {}
        self.last_update_id = 0
        self.task_manager = TaskManager()
        self.temp_task_data = {}  # –î–ª—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞
        if not self.token:
            logger.warning("–¢–æ–∫–µ–Ω –Ω–µ –≤–∫–∞–∑–∞–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    
    def load_config(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É"""
        try:
            if os.path.exists(CONFIG_FILE):
                with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            return {}
    
    def save_config(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —É —Ñ–∞–π–ª"""
        try:
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    
    def api_request(self, method, data=None, files=None):
        """
        –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ Telegram API
        
        :param method: –ú–µ—Ç–æ–¥ API
        :param data: –î–∞–Ω—ñ –¥–ª—è –∑–∞–ø–∏—Ç—É
        :param files: –§–∞–π–ª–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        :return: –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–±–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        """
        if not self.token:
            logger.error("–ó–∞–ø–∏—Ç –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return None
        
        url = API_URL.format(token=self.token, method=method)
        
        try:
            if files:
                response = requests.post(url, data=data, files=files, timeout=30)
            else:
                response = requests.post(url, json=data, timeout=30)
            
            response.raise_for_status()
            result = response.json()
            
            if not result.get('ok'):
                logger.error(f"API –ø–æ–º–∏–ª–∫–∞: {result.get('description')}")
                return None
            
            return result.get('result')
        except requests.RequestException as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
            return None
    
    def get_updates(self, offset=0, timeout=30):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ Telegram API
        
        :param offset: ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è + 1
        :param timeout: –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        :return: –°–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω—å
        """
        data = {
            'offset': offset,
            'timeout': timeout,
            'allowed_updates': ['message', 'callback_query']
        }
        return self.api_request('getUpdates', data)
    
    def send_message(self, chat_id, text, parse_mode=None, reply_markup=None):
        """
        –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        
        :param chat_id: ID —á–∞—Ç—É
        :param text: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        :param parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è (HTML, Markdown)
        :param reply_markup: –†–æ–∑–º—ñ—Ç–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        :return: –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        """
        data = {
            'chat_id': chat_id,
            'text': text
        }
        
        if parse_mode:
            data['parse_mode'] = parse_mode
        
        if reply_markup:
            data['reply_markup'] = reply_markup
        
        return self.api_request('sendMessage', data)
    
    def get_keyboard_markup(self, buttons, one_time=False):
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ç–∫–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        
        :param buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ (—Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫—ñ–≤)
        :param one_time: –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏—Ö–æ–≤—É–≤–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        :return: –û–±'—î–∫—Ç —Ä–æ–∑–º—ñ—Ç–∫–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        """
        return {
            'keyboard': buttons,
            'resize_keyboard': True,
            'one_time_keyboard': one_time
        }
    
    def get_inline_keyboard_markup(self, buttons):
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ç–∫–∏ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        
        :param buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ (—Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫—ñ–≤)
        :return: –û–±'—î–∫—Ç —Ä–æ–∑–º—ñ—Ç–∫–∏ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        """
        return {
            'inline_keyboard': buttons
        }
    
    def get_daily_report(self):
        """
        –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –∑ –∑–∞–¥–∞—á
        
        :return: –¢–µ–∫—Å—Ç –∑–≤—ñ—Ç—É
        """
        tasks = self.task_manager.get_all_tasks()
        
        today = datetime.now().strftime('%d.%m.%Y')
        report = f"üìÖ –ó–≤—ñ—Ç –∑–∞ –¥–µ–Ω—å ({today}):\n\n"
        
        if not tasks:
            return report + "–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑–∞–¥–∞—á –Ω–µ –±—É–ª–æ"
        
        completed_tasks = self.task_manager.get_completed_tasks()
        pending_tasks = self.task_manager.get_pending_tasks()
        
        if completed_tasks:
            report += "‚úÖ –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ:\n"
            for task in completed_tasks:
                report += f"- {task.get('name')}\n"
        
        if pending_tasks:
            if completed_tasks:
                report += "\n"
            report += "‚ùå –ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ:\n"
            for task in pending_tasks:
                report += f"- {task.get('name')}\n"
        
        stats = self.task_manager.get_stats()
        report += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['completed']}/{stats['total']} –≤–∏–∫–æ–Ω–∞–Ω–æ ({stats['completion_rate']}%)"
        
        return report
    
    def send_report(self):
        """
        –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –≤ —á–∞—Ç
        
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        """
        if not self.chat_id:
            logger.warning("–ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç: chat_id –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
            return None
        
        report = self.get_daily_report()
        return self.send_message(self.chat_id, report)
    
    def show_task_list(self, chat_id, filter_type=None):
        """
        –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        
        :param chat_id: ID —á–∞—Ç—É
        :param filter_type: –¢–∏–ø —Ñ—ñ–ª—å—Ç—Ä–∞ (completed, pending, all)
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        """
        if filter_type == 'completed':
            tasks = self.task_manager.get_completed_tasks()
            title = "‚úÖ –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ:"
        elif filter_type == 'pending':
            tasks = self.task_manager.get_pending_tasks()
            title = "‚ùå –ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ:"
        else:
            tasks = self.task_manager.get_all_tasks()
            title = "üìã –í—Å—ñ –∑–∞–¥–∞—á—ñ:"
        
        if not tasks:
            return self.send_message(chat_id, "–ó–∞–¥–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        message = title + "\n\n"
        
        for i, task in enumerate(tasks):
            status = "‚úÖ" if task.get('completed') else "‚ùå"
            due_date = f" (–¥–æ {task.get('due_date')})" if task.get('due_date') else ""
            priority = ""
            if task.get('priority') == 'high':
                priority = " üî¥"
            elif task.get('priority') == 'medium':
                priority = " üü°"
            elif task.get('priority') == 'low':
                priority = " üü¢"
            
            message += f"{i+1}. {status} {task.get('name')}{due_date}{priority}\n"
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥—ñ–π –∑ –∑–∞–¥–∞—á–∞–º–∏
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        filter_row = []
        if filter_type != 'all':
            filter_row.append({'text': 'üìã –í—Å—ñ', 'callback_data': 'filter_all'})
        if filter_type != 'completed':
            filter_row.append({'text': '‚úÖ –í–∏–∫–æ–Ω–∞–Ω—ñ', 'callback_data': 'filter_completed'})
        if filter_type != 'pending':
            filter_row.append({'text': '‚ùå –ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ', 'callback_data': 'filter_pending'})
        
        if filter_row:
            buttons.append(filter_row)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥—ñ–π –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        for i in range(min(5, len(tasks))):
            task_row = []
            task_row.append({
                'text': f"‚úÖ –ó–∞–¥–∞—á–∞ {i+1}",
                'callback_data': f"complete_{i}"
            })
            task_row.append({
                'text': f"‚ùå –ó–∞–¥–∞—á–∞ {i+1}",
                'callback_data': f"uncomplete_{i}"
            })
            task_row.append({
                'text': f"üóëÔ∏è –ó–∞–¥–∞—á–∞ {i+1}",
                'callback_data': f"delete_{i}"
            })
            buttons.append(task_row)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ
        buttons.append([{'text': '‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É', 'callback_data': 'add_task'}])
        
        keyboard = self.get_inline_keyboard_markup(buttons)
        
        return self.send_message(chat_id, message, reply_markup=keyboard)
    
    def start_adding_task(self, chat_id, user_id):
        """
        –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ
        
        :param chat_id: ID —á–∞—Ç—É
        :param user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        """
        self.user_states[user_id] = STATE_WAITING_TASK_NAME
        self.temp_task_data[user_id] = {}
        
        return self.send_message(
            chat_id,
            "–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–¥–∞—á—ñ:"
        )
    
    def sync_with_google_calendar(self, chat_id):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–¥–∞—á –∑ Google Calendar
        
        :param chat_id: ID —á–∞—Ç—É
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        """
        calendar_integration = GoogleCalendarIntegration()
        
        self.send_message(chat_id, "üîÑ –ü–æ—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑ Google Calendar...")
        
        try:
            if not calendar_integration.authenticate():
                return self.send_message(
                    chat_id,
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ Google Calendar.\n\n"
                    "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É credentials.json –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ–µ–∫—Ç—É."
                )
            
            added_count = calendar_integration.sync_calendar_to_tasks()
            
            if added_count >= 0:
                return self.send_message(
                    chat_id,
                    f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!\n\n"
                    f"–î–æ–¥–∞–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ {added_count} –∑–∞–¥–∞—á –∑ Google Calendar"
                )
            else:
                return self.send_message(
                    chat_id,
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ Google Calendar"
                )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ Google Calendar: {e}")
            return self.send_message(
                chat_id,
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {str(e)}"
            )
    
    def handle_message(self, message):
        """
        –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        
        :param message: –û–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        """
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        chat_id = message.get('chat', {}).get('id')
        user_id = message.get('from', {}).get('id')
        text = message.get('text', '')
        
        # –Ø–∫—â–æ chat_id —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
        if not self.chat_id and chat_id:
            self.chat_id = chat_id
            self.config['chat_id'] = chat_id
            self.save_config()
            logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ chat_id: {chat_id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_state = self.user_states.get(user_id, STATE_NONE)
        
        # –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
        if user_state == STATE_WAITING_TOKEN:
            self.token = text.strip()
            self.config['token'] = self.token
            self.save_config()
            self.send_message(chat_id, "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            self.user_states[user_id] = STATE_NONE
            return
        
        # –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –∑–∞–¥–∞—á—ñ
        elif user_state == STATE_WAITING_TASK_NAME:
            if not text:
                self.send_message(chat_id, "‚ùå –ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
                return
            
            self.temp_task_data[user_id]['name'] = text
            self.user_states[user_id] = STATE_WAITING_TASK_DUE_DATE
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É –¥–µ—è–∫–∏—Ö –ø–æ–ª—ñ–≤
            keyboard = self.get_keyboard_markup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ (–Ω–µ–º–∞—î —Ç–µ—Ä–º—ñ–Ω—É)"]], one_time=True)
            
            self.send_message(
                chat_id,
                "–í–≤–µ–¥—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':",
                reply_markup=keyboard
            )
            return
        
        # –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω—É –∑–∞–¥–∞—á—ñ
        elif user_state == STATE_WAITING_TASK_DUE_DATE:
            if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ (–Ω–µ–º–∞—î —Ç–µ—Ä–º—ñ–Ω—É)":
                self.temp_task_data[user_id]['due_date'] = None
            else:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏
                try:
                    datetime.strptime(text, '%d.%m.%Y')
                    self.temp_task_data[user_id]['due_date'] = text
                except ValueError:
                    self.send_message(
                        chat_id,
                        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–†–†–†–† –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':"
                    )
                    return
            
            self.user_states[user_id] = STATE_WAITING_TASK_PRIORITY
            
            # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
            keyboard = self.get_keyboard_markup([
                ["–í–∏—Å–æ–∫–∏–π üî¥", "–°–µ—Ä–µ–¥–Ω—ñ–π üü°", "–ù–∏–∑—å–∫–∏–π üü¢"],
                ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ (–±–µ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É)"]
            ], one_time=True)
            
            self.send_message(
                chat_id,
                "–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á—ñ:",
                reply_markup=keyboard
            )
            return
        
        # –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É –∑–∞–¥–∞—á—ñ
        elif user_state == STATE_WAITING_TASK_PRIORITY:
            if text == "–í–∏—Å–æ–∫–∏–π üî¥":
                self.temp_task_data[user_id]['priority'] = "high"
            elif text == "–°–µ—Ä–µ–¥–Ω—ñ–π üü°":
                self.temp_task_data[user_id]['priority'] = "medium"
            elif text == "–ù–∏–∑—å–∫–∏–π üü¢":
                self.temp_task_data[user_id]['priority'] = "low"
            elif text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ (–±–µ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É)":
                self.temp_task_data[user_id]['priority'] = None
            else:
                self.send_message(
                    chat_id,
                    "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç. –í–∏–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':"
                )
                return
            
            self.user_states[user_id] = STATE_WAITING_TASK_CATEGORY
            
            # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            keyboard = self.get_keyboard_markup([
                ["–†–æ–±–æ—Ç–∞", "–û—Å–æ–±–∏—Å—Ç–µ"],
                ["–ù–∞–≤—á–∞–Ω–Ω—è", "–ü–æ–∫—É–ø–∫–∏"],
                ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ (–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)"]
            ], one_time=True)
            
            self.send_message(
                chat_id,
                "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞–¥–∞—á—ñ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é:",
                reply_markup=keyboard
            )
            return
        
        # –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–¥–∞—á—ñ
        elif user_state == STATE_WAITING_TASK_CATEGORY:
            if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ (–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)":
                self.temp_task_data[user_id]['category'] = None
            else:
                self.temp_task_data[user_id]['category'] = text
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ
            task_data = self.temp_task_data[user_id]
            if self.task_manager.add_task(
                name=task_data.get('name'),
                due_date=task_data.get('due_date'),
                priority=task_data.get('priority'),
                category=task_data.get('category')
            ):
                self.send_message(chat_id, f"‚úÖ –ó–∞–¥–∞—á—É '{task_data.get('name')}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
            else:
                self.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ. –ú–æ–∂–ª–∏–≤–æ, –∑–∞–¥–∞—á–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.")
            
            # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
            del self.temp_task_data[user_id]
            self.user_states[user_id] = STATE_NONE
            return
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
        if text.startswith('/'):
            command = text.split()[0].lower()
            
            if command == '/start':
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é –≥–æ–ª–æ–≤–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
                keyboard = self.get_keyboard_markup([
                    ["/tasks", "/report"],
                    ["/add_task", "/sync_calendar"],
                    ["/settings"]
                ])
                
                self.send_message(
                    chat_id,
                    "üëã –í—ñ—Ç–∞—é! –Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –±–æ—Ç –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á–∞–º–∏.\n\n"
                    "üîπ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                    "/tasks - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
                    "/add_task - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∑–∞–¥–∞—á—É\n"
                    "/report - –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n"
                    "/sync_calendar - –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑ Google Calendar\n"
                    "/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞\n\n"
                    "‚öôÔ∏è –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /settings",
                    reply_markup=keyboard
                )
            
            elif command == '/settings':
                self.send_message(chat_id, "üîë –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:")
                self.user_states[user_id] = STATE_WAITING_TOKEN
            
            elif command == '/report':
                if not self.token:
                    self.send_message(chat_id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /settings")
                    return
                
                report = self.get_daily_report()
                self.send_message(chat_id, report)
            
            elif command == '/tasks':
                if not self.token:
                    self.send_message(chat_id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /settings")
                    return
                
                # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥–∏
                parts = text.split()
                filter_type = 'all'
                
                if len(parts) > 1:
                    param = parts[1].lower()
                    if param in ['completed', 'done', '–≤–∏–∫–æ–Ω–∞–Ω—ñ']:
                        filter_type = 'completed'
                    elif param in ['pending', 'todo', '–Ω–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ']:
                        filter_type = 'pending'
                
                self.show_task_list(chat_id, filter_type)
            
            elif command == '/add_task':
                if not self.token:
                    self.send_message(chat_id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /settings")
                    return
                
                self.start_adding_task(chat_id, user_id)
            
            elif command == '/sync_calendar':
                if not self.token:
                    self.send_message(chat_id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /settings")
                    return
                
                self.sync_with_google_calendar(chat_id)
    
    def handle_callback_query(self, callback_query):
        """
        –û–±—Ä–æ–±–∫–∞ callback query –≤—ñ–¥ inline –∫–Ω–æ–ø–æ–∫
        
        :param callback_query: –û–±'—î–∫—Ç callback query
        """
        query_id = callback_query.get('id')
        chat_id = callback_query.get('message', {}).get('chat', {}).get('id')
        user_id = callback_query.get('from', {}).get('id')
        data = callback_query.get('data', '')
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback query
        self.api_request('answerCallbackQuery', {'callback_query_id': query_id})
        
        # –û–±—Ä–æ–±–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–¥–∞—á
        if data.startswith('filter_'):
            filter_type = data.split('_')[1]
            self.show_task_list(chat_id, filter_type)
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ—ó
        elif data.startswith('complete_'):
            task_id = int(data.split('_')[1])
            if self.task_manager.mark_completed(task_id, True):
                self.send_message(chat_id, f"‚úÖ –ó–∞–¥–∞—á—É #{task_id+1} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω—É")
            else:
                self.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ #{task_id+1}")
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ —è–∫ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–æ—ó
        elif data.startswith('uncomplete_'):
            task_id = int(data.split('_')[1])
            if self.task_manager.mark_completed(task_id, False):
                self.send_message(chat_id, f"‚ùå –ó–∞–¥–∞—á—É #{task_id+1} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω—É")
            else:
                self.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ #{task_id+1}")
        
        # –û–±—Ä–æ–±–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ
        elif data.startswith('delete_'):
            task_id = int(data.split('_')[1])
            if self.task_manager.delete_task(task_id):
                self.send_message(chat_id, f"üóëÔ∏è –ó–∞–¥–∞—á—É #{task_id+1} –≤–∏–¥–∞–ª–µ–Ω–æ")
            else:
                self.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ #{task_id+1}")
        
        # –û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ
        elif data == 'add_task':
            self.start_adding_task(chat_id, user_id)
    
    def process_updates(self):
        """
        –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ Telegram API
        
        :return: True, —è–∫—â–æ –æ–±—Ä–æ–±–∫–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ
        """
        updates = self.get_updates(offset=self.last_update_id + 1)
        if not updates:
            return False
        
        for update in updates:
            update_id = update.get('update_id')
            if update_id > self.last_update_id:
                self.last_update_id = update_id
            
            if 'message' in update:
                self.handle_message(update['message'])
            elif 'callback_query' in update:
                self.handle_callback_query(update['callback_query'])
        
        return True
    
    def polling(self, interval=1):
        """
        –¶–∏–∫–ª—ñ—á–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è API –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω—å
        
        :param interval: –Ü–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        logger.info("–ü–æ—á–∞—Ç–æ–∫ —Ü–∏–∫–ª—ñ—á–Ω–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è")
        while True:
            try:
                self.process_updates()
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è: {e}")
            
            time.sleep(interval)
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤"""
        # –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –∑–≤—ñ—Ç —â–æ–¥–Ω—è –æ 20:00
        schedule.every().day.at("20:00").do(self.send_report)
        
        logger.info("–ó–∞–ø—É—â–µ–Ω–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫")
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
    bot = TelegramBotExtended()
    
    # –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
    if not bot.token:
        logger.warning("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ë–æ—Ç –±—É–¥–µ —á–µ–∫–∞—Ç–∏ –Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    scheduler_thread = Thread(target=bot.run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    
    try:
        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª—ñ—á–Ω–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
        bot.polling()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    main() 